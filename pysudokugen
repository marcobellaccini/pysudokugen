#!/usr/bin/env python3
# --------------------------------------------------------------------
#
# pysudokugen
# Ver. 0.1
#
# Python 3 script that generates random valid sudoku matrices.
# It uses an exponential backoff strategy to generate a valid sudoku.
#
# Author: Marco Bellaccini - marco.bellaccini[at!]gmail.com
#
# License:
# Creative Commons CC0 1.0
# https://creativecommons.org/publicdomain/zero/1.0/legalcode
#
# --------------------------------------------------------------------

import random

# get column j from matrix m
def getcol(m,j):
    col = list()
    for row in m:
        col.append(row[j])
    return col

# get the square where element [i,j] is located
def getsqr(m,i,j):
    if i < 3:
        iidx = 0
    elif i >= 3 and i < 6:
        iidx = 3
    else:
        iidx = 6
    if j < 3:
        jidx = 0
    elif j >= 3 and j < 6:
        jidx = 3
    else:
        jidx = 6
    msq = list()
    msq.append(m[iidx][jidx:jidx+3])
    msq.append(m[iidx+1][jidx:jidx+3])
    msq.append(m[iidx+2][jidx:jidx+3])
    return msq

# print sudoku matrix nicely
def printmatrix(m):
    for row in m:
        print(row)


# get unused numbers for row i
def geterow(m,i):
    pe = list(range(1,10))
    row = m[i]
    for el in row:
        if el in pe:
            pe.remove(el)
    return pe

# get unused numbers for column j
def getecol(m,j):
    pe = list(range(1,10))
    col = getcol(m,j)
    for el in col:
        if el in pe:
            pe.remove(el)
    return pe

# get unused numbers in square where position [i,j] is located
def getesqr(m,i,j):
    pe = list(range(1,10))
    sqr = getsqr(m,i,j)
    for row in sqr:
        for el in row:
            if el in pe:
                pe.remove(el)
    return pe

# get possible values for position [i,j]
def gete(m,i,j):
    per = geterow(m,i)
    pec = getecol(m,j)
    pes = getesqr(m,i,j)
    return list(set(per) & set(pec) & set(pes))

# clear (set to zero) all positions after that one specified
def clearfrom(m,i,j):
    for ii in range(0,9):
        for jj in range(0,9):
            if ii > i or (ii == i and jj >= j):
                m[ii][jj]=0

# get indices to go back n positions from [i,j]
def goback(i,j,n):
    i -= n // 9
    n = n % 9
    if j < n :
        tr = [i-1, 9+(j-n)]
    else:
        tr = [i,j-n]
    if tr[0] < 0:
        tr = [0,0]
    return tr

# initialize sudoku matrix
m = [[0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0]]

# set initial position
i = 0
j = 0

# jump factor
# used to go back, implementing an exponential backoff
# strategy when it is not possible to complete a grid
jmp = 3

# max jump factor
jmpl = 81

# number of attempts
att = 1

# iterate over the matrix elements
while i < 9:
    # iterate over row
    while j < 9:
	# get possible numbers for position [i,j]
        eset = gete(m,i,j)
        # if possible numbers set is empty
        # go back jmp positions
        if not eset:
            i,j = goback(i,j,jmp)
            # apply jump limit
            if jmp > jmpl:
                # reset jump
                jmp = 3
            else:
	        # multiply jump factor by 3 (exponential backoff)
                jmp *= 3
            clearfrom(m,i,j)
            att += 1

        else:
            m[i][j] = random.choice(eset)
	    # decrease jump factor by 1 if position
            # was filled successfully
            jmp -= 1
            # make sure that jump factor is
            # at least 3
            if jmp < 3:
                jmp = 3
            j += 1
    # proceed to the next row
    i += 1
    j = 0

# success: print result
print("Generated valid sudoku after " + str(att) + " attempts:")
printmatrix(m)
